hydra:
  run:
    dir: ${output_dir}
  sweep:
    dir: ''
    subdir: ${output_dir}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.JoblibLauncher
    n_jobs: 4  # 设置并行运行的任务数
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - seed=0,1,2,3
  job:
    name: run
    chdir: true
    override_dirname: seed=0,1,2,3
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: C:\Users\51706\OneDrive\桌面\2024\中大课程\高级计算机体系结构\splitwise-sim
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: C:\Users\51706\OneDrive\桌面\2024\中大课程\高级计算机体系结构\splitwise-sim\configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      start_state: orca
      trace: test_trace
      applications: solo
      power_model: constant
      performance_model: constant
      orchestrator_repo: default
      model_repo: default
      hardware_repo: default
      arbiter: noop
      router: noop
      router/overheads: zero
      cluster: dgx-a100
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: ray
      hydra/output: default
  verbose: false
cluster:
  power_budget: 232000
  servers:
  - sku: dgx-a100
    count: 40
  - sku: dgx-h100
    count: 0
  interconnects:
  - link: infiniband
    topology: p2p
router:
  overheads:
    routing_delay: 0
  _target_: router.NoOpRouter
arbiter:
  _target_: arbiter.NoOpArbiter
  overheads: {}
hardware_repo:
  processors: configs/hardware_repo/processors
  skus: configs/hardware_repo/skus
  interconnects: configs/hardware_repo/interconnects
model_repo:
  architectures: configs/model_repo/architectures
  sizes: configs/model_repo/sizes
orchestrator_repo:
  allocators: configs/orchestrator_repo/allocators
  schedulers: configs/orchestrator_repo/schedulers
performance_model:
  _target_: performance_model.ConstantPerformanceModel
  prompt_time: 1
  token_time: 10
power_model:
  _target_: power_model.ConstantPowerModel
  idle_power:
    a100-80gb: 63
    h100-80gb: 75
  prompt_power:
    a100-80gb: 400
    h100-80gb: 700
  token_power:
    a100-80gb: 250
    h100-80gb: 380
applications:
- application_id: 0
  model_architecture: bloom-176b
  model_size: bloom-176b-fp16
  allocator: noop
  scheduler: round_robin
  overheads: {}
  debug: ${debug}
  _target_: application.Application
trace:
  dir: traces/
  filename: test_trace
  path: ${trace.dir}/${trace.filename}.csv
start_state:
  state_type: orca
  application_id: 0
  instance:
    instance_type: ORCA
    max_batch_size: 512
    pipeline_parallelism: 1
    tensor_parallelism: 8
end_time: 86400
debug: false
seed: 0
choices: ${hydra:runtime.choices}
output_dir: results/${seed}/${start_state.state_type}/${trace.filename}/${cluster.servers.0.count}_${cluster.servers.1.count}/${applications.0.model_architecture}/${applications.0.scheduler}
